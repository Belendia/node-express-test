const path = require("path");

const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const session = require("express-session");
// this library is used to store the sessions generated by express-session to mongodb
const MongoDbStore = require("connect-mongodb-session")(session);
const csrf = require("csurf");
// used to show flash messages to the user
const flash = require("connect-flash");
// read .env file and make the entries available in process.env global variables.
require("dotenv").config();
// used for multipart/form-data for file uploading
const multer = require("multer");

// Secure response headers with helmet
const helmet = require("helmet");

// compress assets like css and js files
const compression = require("compression");

// const { engine } = require("express-handlebars");

const adminRoutes = require("./routes/admin");
const shopRoutes = require("./routes/shop");
const authRoutes = require("./routes/auth");

const User = require("./models/user");

const errorController = require("./controllers/error");

const MONGO_DB_URI = "mongodb://localhost:27017/shopping";

const app = express();

// Setting secure response headers with helmet
app.use(helmet());

// Compress assets
app.use(compression());

// By default the csrf token is stored in the session. You can override that to store the token in the cookie instead.
const csrfProtection = csrf();

// to configure multer will store the file user uploaded
const fileStorage = multer.diskStorage({
  destination: (req, file, callback) => {
    // passing null to multer tell that we are file to store the file
    // set the directory in which the file should be stored.
    callback(null, "images");
  },
  filename: (req, file, callback) => {
    // rename our file.
    callback(null, new Date().toISOString() + "_" + file.originalname);
  },
});

// File filter to filter only a specific file types like .png
const fileFilter = (req, file, callback) => {
  if (
    file.mimetype === "image/png" ||
    file.mimetype === "image/jpg" ||
    file.mimetype === "image/jpeg"
  ) {
    //pass true to the second param if we want to store the file
    callback(null, true);
  } else {
    // and pass false to reject the file storage
    callback(null, false);
  }
};

// Tell express that we want to use handlebars as a templating engine
// The first param can be named anything.
// The second parameter is the function we imported above to initialize handlebars templating engine.
// app.engine(
//   "hbs",
//   engine({
//     extname: "hbs",
//     layoutsDir: "views/layouts/",
//     defaultLayout: "main-layout",
//   })
// );

// Set ejs as a templating engine
app.set("view engine", "ejs");
// The second parameter that you set here should match with the first parameter
// you set in the above code i.e. handlebars
// app.set("view engine", "hbs");

// Tell express that we are going to use a templating engine
// app.set("view engine", "pug");
/**
 * The below line5 is not necessary since the default views directory is views and
 * I am using views to store the templates. But if I use a different
 * name for the views folder for example, templates then I can set it for
 * the views key like
 * app.set('views', 'views');
 **/
app.set("views", "views");

// Middlewares

// This is used to encode data sent from browser in x-www-form-urlencoded.
// which means used to encode data sent through <form ... tag
app.use(bodyParser.urlencoded({ extended: false }));

// Multer is used to decode form data sent in multipart/form-data format which is mainly used to upload files.
// We are expecting to get one file that is why we used single() function.
// Besides, the name of the file picker in the edit-product.ejs is "image" i.e. <input type"file" name="image" ...
// dest - is the destination folder. multer({dest: "images"})
app.use(
  multer({ storage: fileStorage, fileFilter: fileFilter }).single("image")
);

// This is used to decode data sent using application/json which is usually used in REST endpoints
app.use(bodyParser.json());

// Configuration for the mongo db store used to save
// sessions generated into MongoDb
const sessionStore = MongoDbStore({
  uri: MONGO_DB_URI,
  collection: "sessions",
});

//session configuration
app.use(
  session({
    secret: "my secret",
    resave: false,
    saveUninitialized: false,
    store: sessionStore,
  })
);

// Add the csrf protection after we initialize the session
app.use(csrfProtection);

// Initialize flash after you initialize the session
app.use(flash());

app.use(express.static(path.join(__dirname, "public")));
app.use("/images", express.static(path.join(__dirname, "images")));

app.use((req, res, next) => {
  console.log("In the middleware");
  next(); //Allows the request to continue to the next middleware in line
});

// Add the csrf token and the variable that tells node.js that the user is logged in to every view.
app.use((req, res, next) => {
  // locals - is passed to every view in node.js
  // so this variables will be set for ever view that is rendered.
  res.locals.isAuthenticated = req.session.isLoggedIn === true;
  res.locals.csrfToken = req.csrfToken();
  next();
});

app.use((req, res, next) => {
  // throw new Error("error"); // Just to test the global error handling is working
  if (!req.session.user) {
    return next();
  }

  User.findById(req.session.user._id.toString())
    .then((user) => {
      if (!user) {
        return next();
      }
      req.user = user;
      next(); //Allows the request to continue to the next middleware in line
    })
    .catch((err) => {
      // Throwing an error inside of a promiss will not make express reach to the global error handler.
      // Therefore we should use next(new Error(err)) instead. But if we through the error in the synchronous
      // code like on line 105, it will reach the global error handler.
      // throw new Error(err);
      next(new Error(err));
    });
});

// the route can also be registed as a middleware
app.use("/admin", adminRoutes);
app.use(shopRoutes);
app.use(authRoutes);

// Commented because of the reason written in line 144
// app.get("/500", errorController.get500);

//catch all middleware for 404
app.use(errorController.get404);

// Error-handling middleware. The above catch all middleware will make sure that express not to reach here.
// But if you call next(error) with error, then all middlewares will be sikped and this middleware will be
// triggered.
// If you got more than one error-handling middleware, they'll execute from top to bottom. Just like the
// "normal" middleware.
app.use((error, req, res, next) => {
  // This will lead to infinite loop if there is an error in modifying the request like the code in
  // line 105 (featching the current user in line)
  // res.redirect("/500");
  console.log(error);
  res.status(500).render("500", {
    pageTitle: "Page Not Found",
    path: "/500",
    isAuthenticated: req.session.isLoggedIn,
  });
});

mongoose
  .connect(MONGO_DB_URI)
  .then((result) => {
    app.listen(3000);
  })
  .catch((err) => console.log(err));
